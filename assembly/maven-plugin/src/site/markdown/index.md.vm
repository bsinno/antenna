# How to use ${docNameCap} as a Maven plugin

Using ${docNameCap} as a Maven plugin is made possible by following the steps in
the configuration instructions (see [Configuration guide](../how-to-configure.html)).
Adding ${antennaMavenPluginName} to your project's list of plugins enables the ${docNameCap} Maven commands.

```xml
<plugin>
    <groupId>${antennaMavenGroupId}</groupId>
    <artifactId>${antennaMavenPluginName}</artifactId>
    <version>x.y.z</version> <!-- enter desired version here -->

    <configuration>
        ...
    </configuration>
</plugin>
```

If you want to specify a custom repository to get the plugin from, add them either in your `settings` or `pom` file,
following the [instructions](https://maven.apache.org/guides/mini/guide-multiple-repositories.html) in the documentation
of Maven.

```xml
<repository>
    <id>myRepo</id>
    <name>your custom repo</name>
    <url>${antennaMavenRepoAddition}</url>
</repository>
```

You can execute the plugin either with the command line call:

```
mvn antenna:analyze
```

Or bind the analyze goal to a phase:

```xml
<executions>
    <execution>
        <goals>
            <goal>analyze</goal>
        </goals>
        <phase>package</phase>
    </execution>
</executions>
```

#[[##]]# Customizing the attribution document

${docNameCap} provides a built-in attribution document template that works out of
the box. However, you can install jar files that apply a different theme 
to the document.
 
To do this, add a dependency to your project's pom.xml file where you
install the ${docNameCap} plugin, something like this:

```xml
<dependency>
    <groupId>${antennaMavenGroupId}</groupId>
    <artifactId>${antennaAttributionDocumentName}</artifactId>
</dependency>
```

#[[##]]# Adding workflow steps and plugins

It is possible to use workflow steps, knowledge-bases, etc. also if they are not referenced in the assembly.
To do this, the jars need to be added as a dependency for the build.
If you have a custom plugin `my-custom-plugin` with groupId `org.mycompany.plugin`, artifactId `my-custom-plugin` and version `VERSION`, modify the `buildscript` part within `build.gradle` as follows:

```xml
<dependency>
    <groupId>org.mycompany.plugin</groupId>
    <artifactId>my-custom-plugin</artifactId>
    <version>VERSION</version>
</dependency>
```

#[[##]]# Adding entry values over maven properties or environment variables

Sometimes a workflow step contains entries with variables that are credentials or should remain secret due to other reasons.

#[[####]]# Maven Properties

Maven has a standard way of reading in properties, which can also be used for a ${docNameCap} run.
One way is setting them in a separate `settings.xml` or via the command line:

```sh
mvn clean install -Dpassword=password12345
```

Withing your `pom.xml` variables will get rendered correctly.
Should you have a separate `workflow.xml` file that will not be the case.
The property variables are limited to the `pom.xml`.
Should you choose this way, you would have to include a workflow section in your pom ${docName} configuration,
 as described in the [Workflow configuration](../workflow-configuration.html).
Alternatively, you could use system environment variables.


#[[####]]# System environment variables

Additionally you can use system environment variables that you have either set in the environment or when executing the analyze command:

```
SECRET=password12345 mvn clean install
```

Should you execute it within the command, the variable will not be saved in your environment but only exist for the run of the command.
${docNameCap} adheres to standards and only renders environment variables that are written in upper case letters.

Within both your `pom.xml` and the `workflow.xml` you can then reference the variables.

#[[####]]# Note

As explained in this [Sonatype statement](https://central.sonatype.org/articles/2019/Apr/30/http-access-to-repo1mavenorg-and-repomavenapacheorg-is-being-deprecated/)
a decommissioning of HTTP for Gradle Services started in January 2020. Should your builds fail with the reason "HTTPS required" it is
most likely that you are using a decommissioned URL and need to change it to HTTPS.
